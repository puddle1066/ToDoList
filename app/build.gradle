plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.devtools.ksp'
}

int getCommitCount() {
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir projectDir
        commandLine 'git'
        args 'rev-list', 'master', '--count'
        standardOutput = stdout
    }
    return stdout.toString().trim().toInteger()
}

android {
    namespace "com.paullanducci.todolist"
    compileSdk 34

    defaultConfig {
        applicationId "com.paullanducci.todolist"
        minSdkVersion 21
        targetSdk 34
        versionCode = getCommitCount()
        versionName = "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables {
            useSupportLibrary true
        }

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    signingConfigs {

        release {
            storeFile file("/Users/Paul/WORKSPACE/Google Signing Keys/OldFarts.keystore")
            storePassword "Eric1B00"
            keyAlias "Eric"
            keyPassword "Eric1B00"

            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            crunchPngs true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
            crunchPngs false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.3'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += 'META-INF/LICENSE.md'
            excludes += 'META-INF/LICENSE-notice.md'
        }
    }
}

dependencies {
    implementation libs.core.ktx
    implementation libs.lifecycle.runtime.ktx
    implementation libs.activity.compose
    implementation libs.core.splashscreen

    //Navigation animations
    implementation libs.accompanist.navigation.animation

    /** Compose **/
    //   implementation "androidx.compose.material:material$compose_version"
    // or skip Material Design and build directly on top of foundational components
    implementation libs.foundation
    // or only import the main APIs for the underlying toolkit systems,
    // such as input and measurement/layout
    implementation libs.ui

    // Android Studio Preview support
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidbrowserhelper
    implementation libs.test.core.ktx
    implementation libs.firebase.crashlytics.ktx
    implementation libs.firebase.analytics.ktx
    implementation libs.junit.ktx
    implementation libs.androidx.foundation.android
    implementation libs.androidx.tools.core
    debugImplementation libs.androidx.ui.tooling

    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation libs.androidx.material.icons.core
    // Optional - Add full set of material icons
    implementation libs.androidx.material.icons.extended

    // Optional - Integration with LiveData
    implementation libs.androidx.runtime.livedata

    // Optional - Integration with activities
    implementation libs.androidx.activity.compose
    // Optional - Integration with ViewModels
    implementation libs.androidx.lifecycle.viewmodel.compose

    implementation libs.androidx.material3
    implementation libs.accompanist.systemuicontroller

    /** Preference **/
    implementation libs.androidx.preference.ktx

    /** Navigation **/
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.navigation.compose

    //Gson Parser
    implementation libs.gson

    // Paging Compose
    implementation libs.accompanist.pager
    implementation libs.accompanist.pager.indicators
    implementation libs.androidx.work.runtime.ktx

    //Integration Testing
    testImplementation libs.junit
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.test.manifest
    androidTestImplementation(libs.androidx.runner)

    // UI Tests for Compose
    // Test rules and transitive dependencies:
    androidTestImplementation(libs.androidx.ui.test.junit4.v172)
    // Needed for createComposeRule(), but not for createAndroidComposeRule<YourActivity>():
    debugImplementation(libs.androidx.ui.test.manifest)

    //Room Database support Libraries
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    ksp libs.androidx.room.compiler

    //Datastore support
    implementation libs.androidx.datastore.preferences

    //Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.jetbrains.kotlinx.coroutines.android

    // Hilt
    implementation libs.hilt.android.v248
    ksp libs.hilt.compiler.v248
    androidTestImplementation libs.hilt.android.testing
    kspAndroidTest libs.hilt.android.compiler

    //Camera
    implementation(libs.androidx.camera.camera2)
    implementation(libs.camera.view)
    implementation(libs.androidx.camera.lifecycle)


    // RxJava3
    implementation libs.rxjava
    implementation libs.rxandroid

    // Vosk
    //  implementation libs.jna
    implementation libs.vosk.android

}
